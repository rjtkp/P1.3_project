NOTES:
- module add gnu at least 6.4.0
- How to separate code btw .h and .cc files: see e.g. 06_inheritance/organized by Alberto or https://stackoverflow.com/questions/9579930/separating-class-code-into-a-header-and-cpp-file
  -- Seems we cannot define struct Node outside class BST easily. Needed tb known by compiler. To check again... Now fixed in regards with Iterator
  https://stackoverflow.com/questions/39129171/where-to-define-struct-only-to-be-used-as-private-member-variable
  -- node.h and node.cc no more needed at the moment --> Renamed to bst_iterator and using them to define Iterator header and cpp files.
  -- https://isocpp.org/wiki/faq/templates#templates-defn-vs-decl : helpful reading to avoid mistakes with templated stuff.

- Doxygen example: see 06_inheritance/organized by Alberto
  Unfortunately doxygen isn't installed on c3e.

- Makefile to be improved as the one in 06_inheritance?
    -- Nevertheless it's working.

- std::pair data members are named:
first 	T1
second 	T2



NEXT STEPS:
- Define Iterator & ConstIterator. Manage tree traversing (Iterator.begin()).
- Define insert methods
- Define print function
- Error handling


_________________________________________________________________

Jan 17
#ITERATORS
- How to define Iterator.begin and Iterator.end (ConstIter work in the same way)
  --Insert first node --> reset begin & end to this first node
  --For every subsequent insertion: compare new node's key value to the keys in the nodes pointed to by the current begin and end.
  --Reset either of them to the new node if needed.

- How to define operators ++
  -- bla bla bla.....

# UNBALANCED TREE
- How to detect if a given tree is unbalanced:
  Define bool unbalanced_tree function as a member of BST
  -- unbalanced_tree will return true if the absolute value of difference btw the number of elements on the left and the number of elements on the right of least one node in the tree is greater  than a constant that depends on the level of that node in the tree. unbalanced_tree can be defined recursively.
  -- Add tot_num_of_nodes as private variable of BST.
  -- Add n_of_nodes_on_the_left and n_of_nodes_on_the_right as members of struct Node. They must be update every time a new node is inserted.

# INSERTING NEW NODES
- INSERTION POLICY:
  -- use iterator to traverse the tree and find the right place to put the new node.
  -- Every time a node is "overtaken" by the iterator, both its n_of_nodes_on_the_left and n_of_nodes_on_the_right variables should be updated. Their updated values must be read immediately and a function "bool state_if_tree_will_be_unbalanced_after_insertion" (defined analogously to the previous one) should be called on the "overtaken" node. If it returns true, the tree must/should be rebalanced at the end of the insertion.

- REBALANCING A PREVIOUSLY BALANCED TREE WHICH TURNS OUT TO BE UNBALANCED AFTER INSERTING ONE SINGLE NODE




WORKFLOW:
- Insert method
- "naive print"
- Iterator begin, end (+ their constiterator counterparts)
  - ++ & -- operators
- "Ordered" printing of the elements in the tree (using ConstIterators)
- erase node
- balance
- find
- move semantics for the tree








.
